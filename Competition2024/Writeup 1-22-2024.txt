Ok so i've just finished up programming for the night (no thanks to you guys -- none of you showed up what the flip) and here's what you guys should look at so you're ready for tommorow (all work was done in SmartDashboard branch): TopLevelAuto is oging to take in a string which we will give it from SmartDashbord. The string is seperated by commas so I created a class StringParsing.java which is has a couple of static methods (remember I taught you guys about using static methods as utility methods; that's exactly what I'm doing here!) ok so one of the methods is going to seperate the String object into an array of strings, each string in the array representing one of Liams points (B/N/S followed by a number) -- this is the parsePointList(String) method. So! Now we have an array full of these string but it's not really useful until we can translate that into Pose2d objects which is how we are storing positional data (it allows us to store an x, y, theta). I have created another great utility method in StringParsing.java: parseStringPoint(String, boolean) this is going to split that shorthand point (the ones Liam made) into two components: the letter and the number. The letter is going to tell us which array to look in (the arrays are just global public static variables -- the same as our constants and they're stored in AutoPoints.java) and the number is going to tell us the index of our Pose2d we want to extract from it. The reason it also takes in a boolean is because we have to mirror our points depending on if they're on the blue alliance or red alliance side so we actually are using 2D arrays and the 0th index is gonna be blue alliance. Alright, now we actually don't care that much about having a bunch of positions we want actual commands that are going to go to positions or perform things. That's why we are passing our Pose2ds that we get from parseStringPoint() directly into a GoToPoint command because we're just gonna store a nice long ArrayList (ArrayList is just a way of storing a bunch of objects in order) full of Commands! So, we still aren't done yet -- remember Liam said some of the entrances in the list are going to just be "I" or "S" for intaking or shooting. So I just used some simply if statements to check if theres a single character and if there is add either a Shoot or Intake command to the ArrayList. We are now almost done but really in order to actually run these commands in order we better use a SequentalCommandGroud and we can add the commands from our ArrayList of commands to the SequentialCommandGroup using a for loop and just iterating through it combined with using that helpful addCommands() method which SequentialCommandGroup provides. After that, the last thing to do is simply schedule our SequenitalCommandGroup using it's schedule() method.